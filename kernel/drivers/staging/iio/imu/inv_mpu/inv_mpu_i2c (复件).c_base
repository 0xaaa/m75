/*
* Copyright (C) 2012 Invensense, Inc.
*
* This software is licensed under the terms of the GNU General Public
* License version 2, as published by the Free Software Foundation, and
* may be copied, distributed, and modified under those terms.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*/
#define pr_fmt(fmt) "inv_mpu: " fmt

#include <linux/module.h>
#include <linux/init.h>
#include <linux/slab.h>
#include <linux/i2c.h>
#include <linux/err.h>
#include <linux/delay.h>
#include <linux/sysfs.h>
#include <linux/jiffies.h>
#include <linux/irq.h>
#include <linux/interrupt.h>
#include <linux/kfifo.h>
#include <linux/poll.h>
#include <linux/miscdevice.h>
#include <linux/spinlock.h>

#include "inv_mpu_iio.h"
#include "linux/iio/sysfs.h"
#include "inv_test/inv_counters.h"

#ifdef CONFIG_DTS_INV_MPU_IIO
#include "inv_mpu_dts.h"
#endif

#include <linux/spinlock.h>
#include <linux/dma-mapping.h>


#define MAX_IIC_RW_SIZE		8//rocky 
#define DEBUG_IIC_DATA_LIMIT

/**

 *  inv_i2c_read_base() - Read one or more bytes from the device registers.
 *  @st:	Device driver instance.
 *  @i2c_addr:  i2c address of device.
 *  @reg:	First device register to be read from.
 *  @length:	Number of bytes to read.
 *  @data:	Data read from device.
 *  NOTE:This is not re-implementation of i2c_smbus_read because i2c
 *       address could be specified in this case. We could have two different
 *       i2c address due to secondary i2c interface.
 */

#define MAX_TANS_BYTES (8)
int inv_i2c_read_base(struct inv_mpu_state *st, u16 i2c_addr,
	u8 reg, u16 size, u8 *data)
{
	char buf[1024] = {0,};
	int ret = 0, index = 0;
	u8 addr = reg;

	ret = i2c_master_send(st->client, &addr, 1);
	if( ret<0 ) {
		printk("%s  invensense   write error 00 !\n",__func__);
	}

		ret = i2c_master_recv(st->client, buf, size);
		if( ret<0 ) {
			printk("%s  invensense   read error 00 !\n",__func__);
		}

	memcpy(data, buf, size);
	return (ret < 0) ? ret : 0;

#if 0
	struct i2c_msg msgs[2];
	int res;


	printk("invensense \n");
	if (!data)
		return -EINVAL;

	msgs[0].addr = i2c_addr;
	msgs[0].flags = 0;	/* write */
	msgs[0].buf = &reg;
	msgs[0].len = 1;
	msgs[0].timing = 400;
//	msgs[0].ext_flag = msgs[0].ext_flag| I2C_WR_FLAG |I2C_RS_FLAG;
	res = i2c_transfer(st->sl_handle, &msgs[0], 1);

	if (res < 1) {
		if (res >= 0)
			res = -EIO;
	} else
		res = 0;
	msgs[1].addr = i2c_addr | I2C_WR_FLAG |I2C_RS_FLAG ;
	msgs[1].flags = I2C_M_RD;
	msgs[1].buf = data;
	msgs[1].len = size;
	msgs[1].timing = 400;
//	msgs[1].ext_flag = msgs[1].ext_flag| I2C_WR_FLAG |I2C_RS_FLAG;

	res = i2c_transfer(st->sl_handle, &msgs[1], 1);

	if (res < 1) {
		if (res >= 0)
			res = -EIO;
	} else
		res = 0;

	INV_I2C_INC_MPUWRITE(3);
	INV_I2C_INC_MPUREAD(size);

	return res;
#endif
#if 0
	char buf[1024] = {0,};
	int ret = 0, index = 0;
	char addr = reg;

	ret = i2c_master_send(st->client, &addr, 1);
	if( ret<0 ) {
		printk("%s  invensense   write error 00 !\n",__func__);
	}

	for( index = 0; index<size/MAX_TANS_BYTES; index++) {
		ret = i2c_master_recv(st->client, buf, MAX_TANS_BYTES);
		if( ret<0 ) {
			printk("%s  invensense   read error 00 !\n",__func__);
		}
	}
	if( size%MAX_TANS_BYTES ) {

		addr += index*MAX_TANS_BYTES;
		ret = i2c_master_send(st->client, &addr, 1);
		if( ret<0 ) {
			printk("%s  invensense   write error 11 !\n",__func__);
		}
		ret = i2c_master_recv(st->client, buf+index*MAX_TANS_BYTES, size%MAX_TANS_BYTES);
		if( ret<0 ) {
			printk("%s  invensense   read error 11 !\n",__func__);
		}
	}
	memcpy(data, buf, size);
	return (ret < 0) ? ret : 0;

#endif
}

/**
 *  inv_i2c_single_write_base() - Write a byte to a device register.
 *  @st:	Device driver instance.
 *  @i2c_addr:  I2C address of the device.
 *  @reg:	Device register to be written to.
 *  @data:	Byte to write to device.
 *  NOTE:This is not re-implementation of i2c_smbus_write because i2c
 *       address could be specified in this case. We could have two different
 *       i2c address due to secondary i2c interface.
 */
int inv_i2c_single_write_base(struct inv_mpu_state *st,
	u16 i2c_addr, u8 reg, u8 data)
{

	int ret = 0;
	u8 buf[2];

	buf[0] = reg;
	buf[1] = data;

	st->client->addr = i2c_addr;

	ret = i2c_master_send(st->client, buf, sizeof(buf));
	if (ret < 0)
	{
		pr_err("inv i2c_master_send data address 0x%x 0x%x error return %d\n",
				buf[0], buf[1], ret);
	}

	return (ret < 0) ? ret : 0;
}

int inv_plat_single_write(struct inv_mpu_state *st, u8 reg, u8 data)
{
	return inv_i2c_single_write_base(st, st->i2c_addr, reg, data);
}
int inv_plat_read(struct inv_mpu_state *st, u8 reg, int len, u8 *data)
{
	#ifdef DEBUG_IIC_DATA_LIMIT
	int tmp;
	int res = 0;
	u8* dptr;
	dptr =data;
	while (len > 0) {
		if (len < MAX_IIC_RW_SIZE)
			tmp = len;
		else
			tmp = MAX_IIC_RW_SIZE;
		res = inv_i2c_read_base(st, st->i2c_addr, reg, tmp, dptr);
		if (res < 0)
			return res;
		dptr += tmp;
		len -= tmp;
	}
	return res;
#else
	return inv_i2c_read_base(st, st->i2c_addr, reg, len, data);
#endif
}

#define		ONE_PACKAGE_MAX 	128
int mpu_memory_write_dma(struct inv_mpu_state *st, u8 mpu_addr, u16 mem_addr,
		     u32 size, u8 const *data)
{
	char *buf = NULL;
	dma_addr_t phyAddr;
	int ret;
	int len = size+3;
	st->client->addr = mpu_addr;

	buf = dma_alloc_coherent(NULL, len, &phyAddr, GFP_KERNEL);
	if (!buf) {
		pr_err("%s(), can not allocate dma addr\n", __func__);
		return -ENOMEM;
	}

	memset(buf, 0, len);

	buf[0] = REG_MEM_BANK_SEL;
	buf[1] = mem_addr >> 8;
	ret = mt_i2c_master_send(st->client, (const char*)phyAddr, 2, I2C_DMA_FLAG);
	if (ret < 0) {
		pr_err("%s(), REG_BANK_SEL failed WRITE[0x%x] at "
				"cat[%02x] cmd[%02x], ret %d\n", __func__,
				size, buf[0], buf[1], ret);
	}

	buf[0] = REG_MEM_START_ADDR;
	buf[1] = mem_addr & 0xFF;
	ret = mt_i2c_master_send(st->client, (const char*)phyAddr, 2, I2C_DMA_FLAG);
	if (ret < 0) {
		pr_err("%s(), REG_MEM_START_ADDR failed WRITE[0x%x] at "
				"cat[%02x] cmd[%02x], ret %d\n", __func__,
				size, buf[0], buf[1], ret);
	}

	buf[0] = REG_MEM_R_W;
	memcpy(buf+1, data, size);
	ret = mt_i2c_master_send(st->client, (const char*)phyAddr, size+1, I2C_DMA_FLAG);
	if (ret < 0) {
		pr_err("%s(), REG_MEM_RW failed WRITE[0x%x] at "
				"cat[%02x] cmd[%02x], ret %d\n", __func__,
				size, buf[0], buf[1], ret);
	}

	dma_free_coherent(NULL, len, buf, phyAddr);
	//pr_debug("Invensense: inv_memory_write result is %d.\n", ret);
	return (ret < 0) ? ret : 0;
}

int mpu_memory_write(struct inv_mpu_state *st, u8 mpu_addr, u16 mem_addr,
		     u32 size, u8 const *data)
{


	int write_size;
	int written_byte = 0;
	int ret =0 ;
	int total_size = size;

	while (size > 0)
	{
		if (size > ONE_PACKAGE_MAX)
			write_size = ONE_PACKAGE_MAX;
		else
			write_size = size;

		ret = mpu_memory_write_dma(st, mpu_addr, mem_addr+written_byte, write_size, data+written_byte);
		if (ret < 0)
		{
			pr_err("invensense: mpu_memory_write error. written_byte is %d.\n", written_byte);
		}
		written_byte += write_size;
		size -= write_size;
		//pr_debug("invensense: mpu_memory_write, total_size is %d, written_byte is %d, size is %d.\n", total_size, written_byte, size);
	}
	return (ret < 0) ? ret : 0;
}


int mpu_memory_read_dma(struct inv_mpu_state *st, u8 mpu_addr, u16 mem_addr,
		    u32 size, u8 *data)
{
	char *buf = NULL;
	dma_addr_t phyAddr;
	//u8 reg;

	int ret = 0;
	//char wdata[3];
	int len = size+3;
	st->client->addr = mpu_addr;

	buf = dma_alloc_coherent(NULL, len, &phyAddr, GFP_KERNEL);
	if (!buf) {
		pr_err("%s(), can not allocate dma addr\n", __func__);
		return -ENOMEM;
	}

	buf[0] = REG_MEM_BANK_SEL;
	buf[1] = mem_addr >> 8;
	ret = mt_i2c_master_send(st->client, (const char*)phyAddr, 2, I2C_DMA_FLAG);
	if (ret < 0) {
		pr_err("%s(), read REG_BANK_SEL failed WRITE[0x%x] at "
				"cat[%02x] cmd[%02x], ret %d\n", __func__,
				size, buf[0], buf[1], ret);
	}

	buf[0] = REG_MEM_START_ADDR;
	buf[1] = mem_addr & 0xFF;
	ret = mt_i2c_master_send(st->client, (const char*)phyAddr, 2, I2C_DMA_FLAG);
	if (ret < 0) {
		pr_err("%s(), read REG_MEM_START_ADDR failed WRITE[0x%x] at "
				"cat[%02x] cmd[%02x], ret %d\n", __func__,
				size, buf[0], buf[1], ret);
	}

	buf[0] = REG_MEM_R_W;
	ret = mt_i2c_master_send(st->client, (const char*)phyAddr, 1, I2C_DMA_FLAG);
	if (ret < 0) {
		pr_err("%s(), read REG_MEM_RW failed WRITE[0x%x] at "
				"cat[%02x] cmd[%02x], ret %d\n", __func__,
				size, buf[0], buf[1], ret);
	}

	memset(buf, 0, len);
	ret = mt_i2c_master_recv(st->client, ( char*)phyAddr, size, I2C_DMA_FLAG);
	if (ret < 0) {
		pr_err("%s(), read only failed WRITE[0x%x] at "
				"cat[%02x] cmd[%02x], ret %d\n", __func__,
				size, buf[0], buf[1], ret);
	}

	memcpy(data, buf, size);
	dma_free_coherent(NULL, len, buf, phyAddr);

	return (ret < 0) ? ret : 0;
}

int mpu_memory_read(struct inv_mpu_state *st, u8 mpu_addr, u16 mem_addr,
		    u32 size, u8 *data)
{


	int read_want_size;
	int read_already_byte = 0;
	int ret = 0;
	int total_size = size;

	while (size > 0)
	{
		if (size > ONE_PACKAGE_MAX)
			read_want_size = ONE_PACKAGE_MAX;
		else
			read_want_size = size;

		ret = mpu_memory_read_dma(st, mpu_addr, mem_addr+read_already_byte, read_want_size, data+read_already_byte);
		if (ret < 0)
		{
			pr_err("invensense: mpu_memory_read error. read_already_byte is %d.\n", read_already_byte);
		}
		read_already_byte += read_want_size;
		size -= read_want_size;
		//pr_debug("invensense: mpu_memory_read, total_size is %d, read_already_byte is %d, size is %d.\n",
		//		total_size, read_already_byte, size);
	}

	return ((ret < 0) ? ret : 0);
}

/*
 *  inv_mpu_probe() - probe function.
 */
static int inv_mpu_probe(struct i2c_client *client,
						const struct i2c_device_id *id)
{
	struct inv_mpu_state *st;
	struct iio_dev *indio_dev;
	int result;

#ifdef CONFIG_DTS_INV_MPU_IIO
	enable_irq_wake(client->irq);
#endif

	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
		result = -ENOSYS;
		pr_err("I2c function error\n");
		goto out_no_free;
	}
	indio_dev = iio_device_alloc(sizeof(*st));
	if (indio_dev == NULL) {
		pr_err("memory allocation failed\n");
		result =  -ENOMEM;
		goto out_no_free;
	}
	st = iio_priv(indio_dev);
	st->client = client;
	st->sl_handle = client->adapter;
	st->i2c_addr = client->addr;
#ifdef CONFIG_DTS_INV_MPU_IIO
	result = invensense_mpu_parse_dt(&client->dev, &st->plat_data);
	if (result)
		goto out_free;

	/*Power on device.*/
	if (st->plat_data.power_on) {
		result = st->plat_data.power_on(&st->plat_data);
		if (result < 0) {
			dev_err(&client->dev,
					"power_on failed: %d\n", result);
			return result;
		}
	pr_info("%s: power on here.\n", __func__);
	}
	pr_info("%s: power on.\n", __func__);

msleep(100);
#else
	st->plat_data =
		*(struct mpu_platform_data *)dev_get_platdata(&client->dev);
#endif
	/* power is turned on inside check chip type*/
	result = inv_check_chip_type(indio_dev, id->name);
	if (result)
		goto out_free;

	/* Make state variables available to all _show and _store functions. */
	i2c_set_clientdata(client, indio_dev);
	indio_dev->dev.parent = &client->dev;
	st->dev = &client->dev;
	indio_dev->name = id->name;
	st->irq = client->irq;

	result = inv_mpu_configure_ring(indio_dev);
	if (result) {
		pr_err("configure ring buffer fail\n");
		goto out_free;
	}
	result = iio_buffer_register(indio_dev, indio_dev->channels,
					indio_dev->num_channels);
	if (result) {
		pr_err("ring buffer register fail\n");
		goto out_unreg_ring;
	}
	result = inv_mpu_probe_trigger(indio_dev);
	if (result) {
		pr_err("trigger probe fail\n");
		goto out_remove_ring;
	}

	/* Tell the i2c counter, we have an IRQ */
	INV_I2C_SETIRQ(IRQ_MPU, client->irq);

	result = iio_device_register(indio_dev);
	if (result) {
		pr_err("IIO device register fail\n");
		goto out_remove_trigger;
	}

	result = inv_create_dmp_sysfs(indio_dev);
	if (result) {
		pr_err("create dmp sysfs failed\n");
		goto out_unreg_iio;
	}

	mutex_init(&st->suspend_resume_lock);
	inv_init_sensor_struct(st);
	dev_info(&client->dev, "%s is ready to go!\n", indio_dev->name);

	return 0;
out_unreg_iio:
	iio_device_unregister(indio_dev);
out_remove_trigger:
	if (indio_dev->modes & INDIO_BUFFER_TRIGGERED)
		inv_mpu_remove_trigger(indio_dev);
out_remove_ring:
	iio_buffer_unregister(indio_dev);
out_unreg_ring:
	inv_mpu_unconfigure_ring(indio_dev);
out_free:
	iio_device_free(indio_dev);
out_no_free:
	dev_err(&client->adapter->dev, "%s failed %d\n", __func__, result);

	return -EIO;
}

static void inv_mpu_shutdown(struct i2c_client *client)
{
	struct iio_dev *indio_dev = i2c_get_clientdata(client);
	struct inv_mpu_state *st = iio_priv(indio_dev);
	int result;

	mutex_lock(&indio_dev->mlock);
	dev_dbg(&client->adapter->dev, "Shutting down %s...\n", st->hw->name);

	/* reset to make sure previous state are not there */
	result = inv_plat_single_write(st, REG_PWR_MGMT_1, BIT_H_RESET);
	if (result)
		dev_err(&client->adapter->dev, "Failed to reset %s\n",
			st->hw->name);
	msleep(POWER_UP_TIME);
	/* turn off power to ensure gyro engine is off */
	result = inv_set_power(st, false);
	if (result)
		dev_err(&client->adapter->dev, "Failed to turn off %s\n",
			st->hw->name);
	mutex_unlock(&indio_dev->mlock);
}

/*
 *  inv_mpu_remove() - remove function.
 */
static int inv_mpu_remove(struct i2c_client *client)
{
	struct iio_dev *indio_dev = i2c_get_clientdata(client);

	iio_device_unregister(indio_dev);
	if (indio_dev->modes & INDIO_BUFFER_TRIGGERED)
		inv_mpu_remove_trigger(indio_dev);
	iio_buffer_unregister(indio_dev);
	inv_mpu_unconfigure_ring(indio_dev);
	iio_device_free(indio_dev);

	dev_info(&client->adapter->dev, "inv-mpu-iio module removed.\n");

	return 0;
}


#ifdef CONFIG_PM
/*
 * inv_mpu_resume(): resume method for this driver.
 *    This method can be modified according to the request of different
 *    customers. It basically undo everything suspend_noirq is doing
 *    and recover the chip to what it was before suspend.
 */
static int inv_mpu_resume(struct device *dev)
{
	struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
	struct inv_mpu_state *st = iio_priv(indio_dev);

	/* add code according to different request Start */
	pr_debug("%s inv_mpu_resume\n", st->hw->name);
	mutex_lock(&indio_dev->mlock);

	if (st->chip_config.dmp_on) {
		if (st->batch.on) {
			inv_switch_power_in_lp(st, true);
			write_be32_to_mem(st, st->batch.counter, BM_BATCH_THLD);
			inv_plat_single_write(st, REG_INT_ENABLE_2,
							BIT_FIFO_OVERFLOW_EN_0);
			inv_switch_power_in_lp(st, false);
		}
	} else {
		inv_switch_power_in_lp(st, true);
	}
	mutex_unlock(&indio_dev->mlock);
	/* add code according to different request End */
	mutex_unlock(&st->suspend_resume_lock);

	return 0;
}

/*
 * inv_mpu_suspend(): suspend method for this driver.
 *    This method can be modified according to the request of different
 *    customers. If customer want some events, such as SMD to wake up the CPU,
 *    then data interrupt should be disabled in this interrupt to avoid
 *    unnecessary interrupts. If customer want pedometer running while CPU is
 *    asleep, then pedometer should be turned on while pedometer interrupt
 *    should be turned off.
 */
static int inv_mpu_suspend(struct device *dev)
{
	struct iio_dev *indio_dev = i2c_get_clientdata(to_i2c_client(dev));
	struct inv_mpu_state *st = iio_priv(indio_dev);

	/* add code according to different request Start */
	pr_debug("%s inv_mpu_suspend\n", st->hw->name);

	if (st->chip_config.dmp_on) {
		if (st->batch.on) {
			inv_switch_power_in_lp(st, true);
			write_be32_to_mem(st, INT_MAX, BM_BATCH_THLD);
			inv_plat_single_write(st, REG_INT_ENABLE_2, 0);
			inv_switch_power_in_lp(st, false);
		}
	} else {
		/* in non DMP case, just turn off the power */
		inv_set_power(st, false);
	}
	/* add code according to different request End */
	st->suspend_state = true;
	msleep(100);
	mutex_lock(&st->suspend_resume_lock);
	st->suspend_state = false;

	return 0;
}

static const struct dev_pm_ops inv_mpu_pmops = {
	.suspend       = inv_mpu_suspend,
	.resume        = inv_mpu_resume,
};
#define INV_MPU_PMOPS (&inv_mpu_pmops)
#else
#define INV_MPU_PMOPS NULL
#endif /* CONFIG_PM */

static const u16 normal_i2c[] = { I2C_CLIENT_END };
/* device id table is used to identify what device can be
 * supported by this driver
 */
static const struct i2c_device_id inv_mpu_id[] = {
	{"mpu7400", ICM20628},
	{"icm20728", ICM20728},
	{"icm20628", ICM20628},
	{}
};

MODULE_DEVICE_TABLE(i2c, inv_mpu_id);

static struct i2c_driver inv_mpu_driver = {
	.class = I2C_CLASS_HWMON,
	.probe		=	inv_mpu_probe,
	.remove		=	inv_mpu_remove,
	.shutdown	=	inv_mpu_shutdown,
	.id_table	=	inv_mpu_id,
	.driver = {
		.owner	=	THIS_MODULE,
		.name	=	"inv-mpu-iio",
		.pm     =       INV_MPU_PMOPS,
	},
	.address_list = normal_i2c,
};

static struct mpu_platform_data gyro_platform_data = {
	.int_config  = 0x00,
	.level_shifter = 0,
	.orientation = {
	   0,  1,  0,
		-1,  0,  0,
		0,  0,  1 },

	.sec_slave_type = SECONDARY_SLAVE_TYPE_COMPASS,
	.sec_slave_id   = COMPASS_ID_AK09911,
	.secondary_i2c_addr = 0x0C,
	.secondary_orientation = {
	   -1,  0, 0,
	   0,  1, 0,
	   0,  0, -1 },
//	.key = {0x9c, 0xc7, 0x49, 0x7, 0xb, 0x3, 0x34, 0x74, 0x9d, 0x65, 0x52, 0x99, 0xa8, 0xac, 0xc5, 0x5b},

};

static struct i2c_board_info __initdata single_chip_board_info[] = {
	{
		I2C_BOARD_INFO("mpu7400", 0x68),
		.irq = 15, //16
		.platform_data = &gyro_platform_data,
	},
};

static int __init inv_mpu_init(void)
{
	pr_err("sensor hub init %s\n", __func__);
	i2c_register_board_info(3, single_chip_board_info, 1);

	int result = i2c_add_driver(&inv_mpu_driver);
	if (result) {
		pr_err("failed\n");
		return result;
	}
	return 0;
}

static void __exit inv_mpu_exit(void)
{
	i2c_del_driver(&inv_mpu_driver);
}

module_init(inv_mpu_init);
module_exit(inv_mpu_exit);

MODULE_AUTHOR("Invensense Corporation");
MODULE_DESCRIPTION("Invensense device driver");
MODULE_LICENSE("GPL");
MODULE_ALIAS("inv-mpu-iio");
